- name: Create Pterodactyl webroot
  ansible.builtin.file:
    path: '/var/www/pterodactyl'
    state: directory
    mode: '0755'
  become: true

- name: Download Pterodactyl panel
  ansible.builtin.get_url:
    url: 'https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz'
    dest: '/var/www/pterodactyl/panel.tar.gz'
    mode: '0700'
  become: true

- name: Extract Pterodactyl panel into /var/www/pterodactyl
  ansible.builtin.unarchive:
    src: '/var/www/pterodactyl/panel.tar.gz'
    dest: '/var/www/pterodactyl'
    remote_src: true
    mode: '0755'
    creates: '/var/www/pterodactyl/storage'
  become: true

- name: Change Pterodactyl storage directory permissions
  ansible.builtin.file:
    path: '/var/www/pterodactyl/storage'
    recurse: true
    mode: '0755'
  become: true

- name: Change Pterodactyl cache directory permissions
  ansible.builtin.file:
    path: '/var/www/pterodactyl/bootstrap/cache'
    recurse: true
    mode: '0755'
  become: true

- name: Execute templated script mysql.sh
  ansible.builtin.command: /bin/bash /scripts/pterodactyl/mysql.sh 
  become: true

- name: Execute templated script config-panel.sh
  ansible.builtin.command: /bin/bash /scripts/pterodactyl/config-panel.sh 
  become: true

- name: Create Pterodactyl queue worker cron job
  ansible.builtin.cron:
    name: "pterodactyl queue"
    job: "php /var/www/pterodactyl/artisan schedule:run >> /dev/null 2>&1"

- name: Create pteroq systemd service
  ansible.builtin.template:
    src: ../files/pteroq.service
    dest: /etc/systemd/system/pteroq.service
    owner: root
    group: root
  become: true
  register: pteroq_systemd_conf

- name: Validate pteroq systemd service
  ansible.builtin.command: systemd-analyze verify /etc/systemd/system/pteroq.service
  become: true
  when: pteroq_systemd_conf.changed

- name: Enable Pteroq
  ansible.builtin.systemd:
    name: pteroq.service
    state: started
    scope: system
    enabled: true
  become: true

- name: "Set up Let's Encrypt for panel"
  include_tasks: "../../certbot/tasks/main.yml"
  vars:
    certbot_domain: "{{ pterodactyl['panel_host'] }}"
    certbot_email: "{{ email_address }}"
    certbot_flags: ""

- name: Create nginx site file
  ansible.builtin.template:
    src: ../files/nginx
    dest: /etc/nginx/sites-available/{{ pterodactyl['panel_host'] }}
    owner: root
    group: root
    mode: "0744"
  become: true
  register: nginx_site

- name: Stat nginx site symlink
  ansible.builtin.stat: 
    path: /etc/nginx/sites-enabled/{{ pterodactyl['panel_host'] }}
  become: true
  register: nginx_site_stat

- name: Create symlink for nginx site
  ansible.builtin.file:
    src: /etc/nginx/sites-available/{{ pterodactyl['panel_host'] }}
    dest: /etc/nginx/sites-enabled/{{ pterodactyl['panel_host'] }}
    owner: root
    group: root
    mode: "0744"
    state: link
  become: true
  when: not nginx_site_stat.stat.exists

- name: Verify nginx site file
  ansible.builtin.command: nginx -t
  become: true
  when: nginx_site.changed

- name: Restart nginx
  ansible.builtin.systemd:
    name: nginx.service
    state: restarted
    scope: system
    enabled: true
  become: true
  when: nginx_site.changed